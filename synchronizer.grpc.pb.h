// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: synchronizer.proto
#ifndef GRPC_synchronizer_2eproto__INCLUDED
#define GRPC_synchronizer_2eproto__INCLUDED

#include "synchronizer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace csce438 {

// Init and Heartbeat potentially redundant
class SynchService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.SynchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //   rpc Heartbeat (ServerInfo) returns (Confirmation) {}
    //   rpc GetServer (ID) returns (ServerInfo) {}
    virtual ::grpc::Status SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncSendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncSendFollowingListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncSendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncSendFollowingListRaw(context, request, cq));
    }
    virtual ::grpc::Status SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncSendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncSendTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncSendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncSendTimelineRaw(context, request, cq));
    }
    virtual ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //   rpc Heartbeat (ServerInfo) returns (Confirmation) {}
      //   rpc GetServer (ID) returns (ServerInfo) {}
      virtual void SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncSendFollowingListRaw(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncSendFollowingListRaw(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncSendTimelineRaw(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncSendTimelineRaw(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncSendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncSendFollowingListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncSendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncSendFollowingListRaw(context, request, cq));
    }
    ::grpc::Status SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncSendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncSendTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncSendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncSendTimelineRaw(context, request, cq));
    }
    ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void SendFollowingList(::grpc::ClientContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void SendTimeline(::grpc::ClientContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncSendFollowingListRaw(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncSendFollowingListRaw(::grpc::ClientContext* context, const ::csce438::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncSendTimelineRaw(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncSendTimelineRaw(::grpc::ClientContext* context, const ::csce438::TimeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendFollowingList_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_ResynchServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //   rpc Heartbeat (ServerInfo) returns (Confirmation) {}
    //   rpc GetServer (ID) returns (ServerInfo) {}
    virtual ::grpc::Status SendFollowingList(::grpc::ServerContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response);
    virtual ::grpc::Status SendTimeline(::grpc::ServerContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response);
    virtual ::grpc::Status ResynchServer(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFollowingList(::grpc::ServerContext* context, ::csce438::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendTimeline() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTimeline(::grpc::ServerContext* context, ::csce438::TimeInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResynchServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendFollowingList<WithAsyncMethod_SendTimeline<WithAsyncMethod_ResynchServer<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::UserInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::UserInfo* request, ::csce438::Confirmation* response) { return this->SendFollowingList(context, request, response); }));}
    void SetMessageAllocatorFor_SendFollowingList(
        ::grpc::MessageAllocator< ::csce438::UserInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::UserInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendFollowingList(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendTimeline() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::TimeInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::TimeInfo* request, ::csce438::Confirmation* response) { return this->SendTimeline(context, request, response); }));}
    void SetMessageAllocatorFor_SendTimeline(
        ::grpc::MessageAllocator< ::csce438::TimeInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::TimeInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response) { return this->ResynchServer(context, request, response); }));}
    void SetMessageAllocatorFor_ResynchServer(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendFollowingList<WithCallbackMethod_SendTimeline<WithCallbackMethod_ResynchServer<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendTimeline() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResynchServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFollowingList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendTimeline() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendFollowingList(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendFollowingList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendTimeline() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendTimeline(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResynchServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendFollowingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendFollowingList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::UserInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::UserInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedSendFollowingList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendFollowingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendFollowingList(::grpc::ServerContext* /*context*/, const ::csce438::UserInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendFollowingList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::UserInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendTimeline() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::TimeInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::TimeInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedSendTimeline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTimeline(::grpc::ServerContext* /*context*/, const ::csce438::TimeInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::TimeInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResynchServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedResynchServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResynchServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendFollowingList<WithStreamedUnaryMethod_SendTimeline<WithStreamedUnaryMethod_ResynchServer<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendFollowingList<WithStreamedUnaryMethod_SendTimeline<WithStreamedUnaryMethod_ResynchServer<Service > > > StreamedService;
};

}  // namespace csce438


#endif  // GRPC_synchronizer_2eproto__INCLUDED
